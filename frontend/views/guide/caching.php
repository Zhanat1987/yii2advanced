<h1>
    Кэширование
</h1>
<hr />
<p>
    Кэширование является дешевым и эффективным способом повысить производительность веб-приложения. Сохраняя относительно статические данные в кэше и получая их из кэша при их запросе, приложение сохраняет время, необходимое для получения данных с нуля. Кэширование является одним из лучших способов улучшить производительность вашего приложения, кэширование обязательно почти в любом крупномасштабном сайте.
</p>
<h2>
    Базовые понятия
</h2>
<hr />
<p>
    Использование кэша в Yii включает в себя настройку и доступ к компоненту кэш приложения. Следующая конфигурация приложения указывает компонент кэша, использующий Memcached с двумя кэш-серверами. Обратите внимание, что эта конфигурация должна быть сделана в файле, расположенном в @app/config/web.php в случае, если вы, используете базовый шаблон приложения.<br />
    <?php
    highlight_string("<?php
'components' => [
    'cache' => [
        'class' => '\\yii\\caching\\MemCache',
        'servers' => [
            [
                'host' => 'server1',
                'port' => 11211,
                'weight' => 100,
            ],
            [
                'host' => 'server2',
                'port' => 11211,
                'weight' => 50,
            ],
        ],
    ],
],
?>");
    ?>
</p>
<p>
    Когда приложение запущено, то компонент кэша может быть доступен через вызов Yii::$app->cache.
</p>
<p>
    Yii предоставляет различные компоненты кэша, которые могут хранить данные в кэше в различных средах. Ниже приведен список доступных компонентов кэширования:
</p>
<ul>
    <li>[[yii\caching\ApcCache]]: используется расширение PHP APC. Эта опция может рассматриваться как один из самых быстрых кэшей, при работе с кэшом для централизованного полного приложения (например, один сервер, нет выделенного балансировщика нагрузки, и т.д.).</li>
    <li>[[yii\caching\DbCache]]: использует таблицы базы данных для хранения кэшированных данных. По умолчанию, он будет создавать и использовать базу данных SQLite3 в каталоге runtime. Вы можете явно указать базу данных для этого, установите его свойство db.</li>
    <li>[[yii\caching\DummyCache]]: представляет фиктивный кэш, который не делает кэширования вообще. Цель данного компонента заключается в упрощении кода, который должен проверить наличие кэша. Например, в процессе разработки или если сервер не имеет реальную поддержку кэша, то мы можем использовать этот компонент кэша. Когда фактическая поддержка кэширования будет включена, то мы можем перейти на использование соответствующего компонента кэша. В обоих случаях мы можем использовать тот же код Yii::$app->cache->get($key), чтобы попытаться получить часть данных, не беспокоясь, что Yii::$app->cache может быть пустым.</li>
    <li>[[yii\caching\FileCache]]: используются стандартные файлы для хранения кэшированных данных. Это особенно подходит для кэширования большого объема данных (например, страниц).</li>
    <li>[[yii\caching\MemCache]]: использует PHP Memcache и Memcached расширения. Эта опция может рассматриваться как один из самых быстрых кэшей, при работе с кэшом через распределенные приложения (например, с несколькими серверами, балансировщиками нагрузки и т.д.)</li>
    <li>[[yii\redis\Cache]]: реализует компонент кэша на основе Redis ключ-значение хранилища (требуется redis версии 2.6.12 или выше).</li>
    <li>[[yii\caching\WinCache]]: использует PHP WinCache (см. также) расширения.</li>
    <li>[[yii\caching\XCache]]: использует расширение PHP XCache.</li>
    <li>[[yii\caching\ZendDataCache]]: использует Zend Data Cache в качестве базового кэширования среды.</li>
</ul>
<p>
    Совет: поскольку все эти компоненты кэширования наследуются от одного базового класса [[yii\caching\Cache]], то можно перейти на использование другого типа кэширования без изменения кода, использующего кэш.
</p>
<p>
    Кэширование может использоваться на различных уровнях. На самом низком уровне, мы используем кэш для хранения одного куска данных, например значение переменной, и мы называем это кэшированием данных. На следующем уровне, мы храним в кэше фрагменты страницы, которые генерируются частями представления скрипта. И на самом высоком уровне, мы храним целую страницу в кэше и получаем ее из кэша по мере необходимости.
</p>
<p>
    В следующих нескольких подразделах, мы продумаем как использовать кэш на этих уровнях.
</p>
<p>
    Обратите внимание, по определению, кэш - это непостоянный носитель. Кэш не обеспечивает существование кэшированных данных постоянно, даже если кэшированные данные не имеют срока действия. Поэтому не используйте кэш как постоянное хранение (например, не используйте кэш для хранения данных сессии или другую ценную информацию).
</p>
<h2>
    Кэширование данных
</h2>
<hr />
<p>
    Кэширование данных - это хранение некоторой переменной PHP в кэше и получение ее из кэша. Для этого базовый класс компонента cache [[yii\caching\Cache]] предоставляет два метода, которые используются большую часть времени: ​​[[yii\caching\Cache::set()|set()]] и [[yii\caching\Cache::get()|get()]]. Обратите внимание, что только сериализуемые переменные и объекты могут успешно кэшироваться.
</p>
<p>
    Чтобы сохранить значение переменной $value в кэше, мы выбираем уникальный ключ $key и вызываем метод [[yii\caching\Cache::set()|set()]], чтобы сохранить его:<br />
    <?php
    highlight_string("<?php
Yii::\$app->cache->set(\$key, \$value);
?>");
    ?>
</p>
<p>
    Кэшированные данные будут оставаться в кэше вечно, если только не будут удалены из-за некоторой политики кэширования (например, не хватает места для кэширования и тогда самые старые данные удаляются). Чтобы изменить это поведение, мы также можем поставить значение срока действия кэша при вызове [[yii\caching\Cache::set()|set()]], так чтобы данные были удалены из кэша после определенного периода времени:<br />
    <?php
    highlight_string("<?php
// keep the value in cache for at most 45 seconds
Yii::\$app->cache->set(\$key, \$value, 45);
?>");
    ?>
</p>
<p>
    Затем когда мы должны получить доступ к этой переменной (в том же или другом веб-запросе), мы вызываем метод [[yii\caching\Cache::get()|get()]] с необходимым ключом, чтобы извлечь нужное значение из кэша. Если возвращенное значение является ложным (false), то это означает, что значение не доступно в кэше и мы должны регенерировать его:<br />
    <?php
    highlight_string("<?php
public function getCachedData()
{
    \$key = /* generate unique key here */;
    \$value = Yii::\$app->cache->get(\$key);
    if (\$value === false) {
        \$value = /* regenerate value because it is not found in cache and then save it in cache for later use */;
        Yii::\$app->cache->set(\$key, \$value);
    }
    return \$value;
}
?>");
    ?>
</p>
<p>
    Это общая картина произвольного кэширования данных для общего пользования.
</p>
<p>
    При выборе ключа для кэширования, убедитесь, что ключ является уникальным среди всех других ключей, которые могут быть кэшированы в приложении. НЕ требуется  чтобы ключ был уникальным в различных приложениях, так как компонент кэша достаточно умен, чтобы дифференцировать ключи для различных приложений.
</p>
<p>
    Некоторые кэш-хранилища, такие как MemCache, APC, поддерживают загрузку нескольких кэшированных значений в пакетном режиме, который может уменьшить накладные расходы на получение кэшированных данных. Метод с именем [[yii\caching\Cache::mget()|mget()]] позволяет использовать эту особенность. В случае если кэш-хранилище не поддерживает эту особенность, то [[yii\caching\Cache::mget()|mget()]] будет по-прежнему имитировать ее.
</p>
<p>
    Для удаления кэшированного значения из кэша, вызовите метод [[yii\caching\Cache::delete()|delete()]], а также для очистки всего кэша, вызовите метод [[yii\caching\Cache::flush()|flush()]]. Будьте очень осторожны при вызове метода [[yii\caching\Cache::flush()|flush()]], потому что он также удаляет кэшированные данные из других приложений, если кэш является общим для различных приложений.
</p>
<p>
    Примечание, т.к. [[yii\caching\Cache]] реализует интерфейс ArrayAccess, то компонент кэша может использоваться как массив. Ниже приведены некоторые примеры:<br />
    <?php
    highlight_string("<?php
\$cache = Yii::\$app->cache;
\$cache['var1'] = \$value1;  // equivalent to: \$cache->set('var1', \$value1);
\$value2 = \$cache['var2'];  // equivalent to: \$value2 = \$cache->get('var2');
?>");
    ?>
</p>
<h3>
    Зависимость кэша
</h3>
<p>
    Помимо установки срока, кэшированные данные также могут быть признаны недействительными в соответствии с некоторыми изменениями зависимости. Например, если мы кэшируем содержимое некоторого файла, и файл изменился, то мы должны аннулировать сохраненную копию и читать обновленное содержимое файла, а не кэша.
</p>
<p>
    Мы представляем зависимость как экземпляр [[yii\caching\Dependency]] или его дочернего класса. Мы передаем экземпляр зависимости вместе с данными для кэширования при вызове метода [[yii\caching\Cache::set()|set()]].<br />
    <?php
    highlight_string("<?php
use yii\\caching\\FileDependency;

// the value will expire in 30 seconds
// it may also be invalidated earlier if the dependent file is changed
Yii::\$app->cache->set(\$id, \$value, 30, new FileDependency(['fileName' => 'example.txt']));
?>");
    ?>
</p>
<p>
    Теперь, если мы получаем $value из кэша, вызвав get(), то будет проверена зависимость и если она изменилась, то мы получим ложное (false) значение, показывающее, что данные требуют обновления.
</p>
<p>
    Ниже приводится краткая информация о доступных зависимостях кэша:
</p>
<ul>
    <li>[[yii\caching\FileDependency]]: зависимость меняется, если изменилось время последней модификации файла.</li>
    <li>[yii\caching\GroupDependency]]: отмечает в кэше элемент данных с именем группы. Вы можете сделать не действительными кэшированные элементы данных с тем же именем группы, всех сразу, вызвав метод [[yii\caching\GroupDependency::invalidate()]].</li>
    <li>[[yii\caching\DbDependency]]: зависимость меняется, если результат запроса некоторого определенного выражения SQL изменяется.</li>
    <li>[[yii\caching\ChainedDependency]]: зависимость меняется, если любая из зависимостей текущей цепочки была изменена.</li>
    <li>[[yii\caching\ExpressionDependency]]: зависимость меняется, если результат определенного PHP выражения был изменен.</li>
</ul>
<h3>
    Кэширование запросов
</h3>
<p>
    Для кэширования результатов запросов к базе данных вы можете обернуть их в вызовы методов [[yii\db\Connection::beginCache()]] и [[yii\db\Connection::endCache()]]:<br />
    <?php
    highlight_string("<?php
\$connection->beginCache(60); // cache all query results for 60 seconds.
// your db query code here...
\$connection->endCache();
?>");
    ?>
</p>
<h2>
    Кэширование фрагментов
</h2>
<hr />
<p>
    Подлежит обсуждению:
    <a href="http://www.yiiframework.com/doc/guide/1.1/en/caching.fragment" target="_blank">
        http://www.yiiframework.com/doc/guide/1.1/en/caching.fragment
    </a>
</p>
<h3>
    Параметры кэширования
</h3>
<p>
    Подлежит обсуждению:
    <a href="http://www.yiiframework.com/doc/guide/1.1/en/caching.fragment#caching-options" target="_blank">
        http://www.yiiframework.com/doc/guide/1.1/en/caching.fragment#caching-options
    </a>
</p>
<h3>
    Вложенное кэширование
</h3>
<p>
    Подлежит обсуждению:
    <a href="http://www.yiiframework.com/doc/guide/1.1/en/caching.fragment#nested-caching" target="_blank">
        http://www.yiiframework.com/doc/guide/1.1/en/caching.fragment#nested-caching
    </a>
</p>
<h2>
    Динамическое содержание
</h2>
<hr />
<p>
    Подлежит обсуждению:
    <a href="http://www.yiiframework.com/doc/guide/1.1/en/caching.dynamic" target="_blank">
        http://www.yiiframework.com/doc/guide/1.1/en/caching.dynamic
    </a>
</p>
<h2>
    Кэширование страниц
</h2>
<hr />
<p>
    Подлежит обсуждению:
    <a href="http://www.yiiframework.com/doc/guide/1.1/en/caching.page" target="_blank">
        http://www.yiiframework.com/doc/guide/1.1/en/caching.page
    </a>
</p>
<h3>
    Кэширование вывода
</h3>
<p>
    Подлежит обсуждению:
    <a href="http://www.yiiframework.com/doc/guide/1.1/en/caching.page#output-caching" target="_blank">
        http://www.yiiframework.com/doc/guide/1.1/en/caching.page#output-caching
    </a>
</p>
<h3>
    HTTP кэширование
</h3>
<p>
    Подлежит обсуждению:
    <a href="http://www.yiiframework.com/doc/guide/1.1/en/caching.page#http-caching" target="_blank">
        http://www.yiiframework.com/doc/guide/1.1/en/caching.page#http-caching
    </a>
</p>