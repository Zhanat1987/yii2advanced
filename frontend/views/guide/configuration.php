<h1>
    Конфигурация
</h1>
<hr />
<p>
    Yii приложения полагаются на компоненты для выполнения наиболее распространенных задач, таких как подключение к базе данных, маршрутизация запросов браузера и обработка сессий. Поведение этих компонентов в своем приложении можно регулировать с помощью настроек в конфигурационных файлах. Большинство компонентов имеют разумные значения по умолчанию, так что маловероятно, что вы будете делать много настроек. Тем не менее, есть некоторые обязательные параметры конфигурации, которые вам придется установить, например, соединение с базой данных.
    Как приложение настроено зависит от применяемого шаблона в использовании, но есть некоторые общие принципы, которые применяются в каждом случае Yii.
</p>
<h2>
    Настройка параметров в файле загрузки
</h2>
<p>
    Для каждого приложения в Yii есть по крайней мере один загрузочный файл: скрипт, с помощью которого обрабатываются все запросы.
    Для веб-приложений файлом начальной загрузки (фронт-контроллер приложения) обычно является index.php.
    Для консольных приложений, файлом начальной загрузки является yii.
    Оба файла загрузки выполняют почти одну и ту же работу:<br />
    1. Настройка общих констант.<br />
    2. Подключение самого фреймворка.<br />
    3. Подключение автозагрузчика Composer'а.<br />
    4. Чтение файла конфигурации в переменную $config.<br />
    5. Создание нового экземпляра приложения, настроенного через $config, и запуск этого экземпляра на исполнение.
</p>
<p>
    Как и любой ресурс в вашем Yii приложении, файл начальной загрузки может быть отредактирован, чтобы соответствовать вашим потребностям.
    Типичные изменения касаются константы YII_DEBUG. Эта константа должна быть true в процессе разработки, но всегда false на продакшене.
    Структура начальной загрузки по умолчанию устанавливает YII_DEBUG в false, если не определена константа:<br />
    <?php
    highlight_string("<?php defined('YII_DEBUG') or define('YII_DEBUG', false); ?>");
    ?>
    <br />
    Во время разработки, вы можете установить YII_DEBUG в true:<br />
    <?php
    highlight_string("<?php
define('YII_DEBUG', true); // Development only
defined('YII_DEBUG') or define('YII_DEBUG', false);
?>");
    ?>
</p>
<h2>
    Настройка экземпляра приложения
</h2>
<hr />
<p>
    Экземпляр приложения настраивается, когда он создается в файле начальной загрузки.
    Конфигурация обычно хранится в файле РНР, который хранится в директории приложения '/config'. Файл имеет следующую начальную структуру:<br />
    <?php
    highlight_string("<?php
return [
    'id' => 'applicationId',
    'basePath' => dirname(__DIR__),
    'components' => [
        // configuration of application components goes here...
    ],
    'params' => require(__DIR__ . '/params.php'),
];
?>");
    ?>
</p>
<p>
    Конфигурация является большим массивом пар ключ-значение.
    В приведенном выше коде ключи массива являются именами свойств приложения.
    В зависимости от типа приложения, вы можете настроить свойства для класса [[yii\web\Application]] или [[yii\console\Application]].
    Оба класса расширяются от [[yii\base\Application]].
</p>
<p>
    Обратите внимание, что вы можете настроить не только public свойства класса, но и любое свойство также доступно через сеттер.
    Например, чтобы настроить путь выполнения, вы можете использовать ключ с именем runtimePath. Такого свойства нет в классе приложения, но так как класс имеет соответствующий сеттер по имени setRuntimePath, то runtimePath можно настроить.
    Возможность настройки свойств через сеттеры доступна любому классу, который наследуется от [[yii\base\Object]], так как почти каждый класс в рамках Yii наследуется от [[yii\base\Object]].
</p>
<h2>
    Настройка компонентов приложения
</h2>
<hr />
<p>
    Большинство функциональных возможностей Yii поступает из компонентов приложения.
    Эти компоненты крепятся к экземпляру приложения через свойство экземпляра 'components':<br />
    <?php
    highlight_string("<?php
return [
    'id' => 'applicationId',
    'basePath' => dirname(__DIR__),
    'components' => [
        'cache' => ['class' => 'yii\\caching\\FileCache'],
        'user' => ['identityClass' => 'app\\models\\User'],
        'errorHandler' => ['errorAction' => 'site/error'],
        'log' => [
            'traceLevel' => YII_DEBUG ? 3 : 0,
            'targets' => [
                [
                    'class' => 'yii\\log\\FileTarget',
                    'levels' => ['error', 'warning'],
                ],
            ],
        ],
    ],
    // ...
];
?>");
    ?>
</p>
<p>
    В приведенном выше коде настраиваются четыре компонента: cache, user, errorHandler, log. Каждый ключ является ID компонента.
    Значениями является подмассивы, используемые для настройки этого компонента.
    ID компонента также используется для доступа к компоненту в любом месте приложения, используя код: <?php highlight_string('<?php \Yii::$app->myComponent ?>'); ?>
</p>
<p>
    Массив конфигурации имеет один специальный ключ с именем 'class', который идентифицирует базовый класс компонента.
    Остальные ключи и значения используются для настройки свойств компонента так же, как ключи и значения верхнего уровня используются для настройки свойств приложения.
</p>
<p>
    Каждое приложение имеет предопределенный набор компонентов.
    Чтобы настроить один из компонентов, ключ с именем 'class' можно не указывать, тогда будет использоваться класс Yii по умолчанию для этого компонента.
    Вы можете проверить registerCoreComponents() - метод приложения, чтобы получить список идентификаторов компонентов и соответствующих классов или <code>\Yii::$app->components</code>.
</p>
<p>
    Обратите внимание, что Yii достаточно умен, чтобы настроить компонент, только тогда когда он фактически используется: ​​например, если вы настроите компонент кэша в файле конфигурации, но никогда не будете его использовать в коде, то ни одного экземпляра этого компонента не будет создано и не будет потрачено время на его настройку.
</p>
<h2>
    Установка компонентов по умолчанию classwide
</h2>
<hr />
<p>
    Для каждого компонента можно уточнить classwide по-умолчанию.
    Например, если вы хотите изменить класс, используемый для всех виджетов LinkPager без указания класса для каждого использования виджета, то вы можете сделать следующее:<br />
    <?php
    highlight_string("<?php
\\Yii::\\$objectConfig = [
    'yii\\widgets\\LinkPager' => [
        'options' => [
            'class' => 'pagination',
        ],
    ],
];
?>");
    ?>
</p>
<p>
    Этот код должен быть выполнен один раз перед использованием виджета LinkPager.
    Это может быть сделано в index.php, файле конфигурации приложения, или в другом месте.
</p>