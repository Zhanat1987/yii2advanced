<h1>
    Расширения Yii
</h1>
<hr />
<p>
    Фреймворка Yii был разработан так, чтобы быть легко расширяемым. Дополнительные функции могут быть добавлены в проект, а затем повторно использоваться, либо самостоятельно в других проектах или путем создания официального расширения Yii.
</p>
<h2>
    Стиль кода
</h2>
<hr />
<p>
    Чтобы соответствовать основным конвенциям Yii, ваши расширения должны придерживаться определенных стилей кодирования:
</p>
<ul>
    <li>Используйте стиль кода как в фреймворке.</li>
    <li>Классы документов, методы и свойства документировать с PHPDoc. - Классы расширения не должны иметь префикс. Не используйте формат TbNavBar, EMyWidget и т.д.</li>
</ul>
<blockquote>
    <p>
        Обратите внимание, что вы можете использовать Markdown в коде для документации. С помощью Markdown, вы можете ходить по ссылке свойств и методов, используя следующий синтаксис: [[name()]], [[namespace\MyClass::name()]].
    </p>
</blockquote>
<h3>
    Пространство имен
</h3>
<p>
    Yii 2 опирается на пространства имен для организации кода. (Поддержка пространств имен была добавлен в PHP в версии 5.3.) Если вы хотите использовать пространства имен в пределах вашего расширения:
</p>
<ul>
    <li>Не используйте yiisoft нигде в ваших пространствах имен.</li>
    <li>Не используйте \yii, \yii2 или \yiisoft как корневые пространства имен.</li>
    <li>Пространства имен должны использовать синтаксис vendorName\uniqueName.</li>
</ul>
<p>
    Выбор уникального пространства имен важно для предотвращения конфликтов имен, а также приводит к более быстрой автозагрузки классов. Примеры уникальности в соответствии с namepacing являются:
</p>
<ul>
    <li>samdark\wiki</li>
    <li>samdark\debugger</li>
    <li>samdark\googlemap</li>
</ul>
<h2>
    Распределение
</h2>
<hr />
<p>
    Помимо самого кода, весь дистрибутив расширения должен иметь определенные вещи.
</p>
<p>
    Там должен быть readme.md файл, написанный на английском языке. Этот файл должен четко описывать то, что расширение делает, свои требования, как его установить и использовать. README должен быть написан с использованием Markdown. Если вы хотите сделать переведенные файлы README, то назовите их readme_ru.md где RU является ваш код языка (в данном случае, русский).
</p>
<p>
    Хорошей идеей является включение нескольких скриншотов как часть документации, особенно если ваше расширение предоставляет виджет.
</p>
<p>
    Рекомендуется размещать свои расширения в GitHub.
</p>
<p>
    Расширения также должны быть зарегистрированы на Packagist, чтобы быть могли устанавливаться через Composer.
</p>
<h3>
    Имя пакета Composer
</h3>
<p>
    Выберите имя пакета вашего расширения мудро, так как вы не должны изменять имя пакета в дальнейшем. (Изменение имени приводит к потере статистики в композиторе, и делает невозможным установку пакета под старым названием.)
</p>
<p>
    Если ваше расширение было сделано специально для Yii2 (т.е. не может быть использованы в виде отдельной библиотеки PHP) рекомендуется назвать его так:<br />
    <?php
    highlight_string("<?php
yii2-my-extension-name-type
?>");
    ?>
</p>
<p>
    Где:
</p>
<ul>
    <li>yii2 - является префиксом.</li>
    <li>Имя расширения должно быть в нижнем регистре, каждое новое слово должно разделяться '-'.</li>
    <li>-type - типом постфикса может быть виджет, поведение, модуль и т.д.</li>
</ul>
<h3>
    Зависимости
</h3>
<p>
    Некоторые расширения, которые вы разрабатываете могут иметь свои собственные зависимости, например, опираясь на другие расширения или сторонние библиотеки. При наличии зависимостей, вы должны требовать их в файле composer.json вашего расширения. Будьте уверены, что используются соответствующие версии, например - 1.*, @stable для требований.
</p>
<p>
    Наконец, когда ваше расширение выпущено в стабильной версии, проверьте, что ее требования не включают Dev пакеты, которые не имеют стабильного релиза. Другими словами, стабильный релиз вашего расширения должен полагаться только на стабильные зависимости.
</p>
<h3>
    Версионность
</h3>
<p>
    Если вы поддерживаете и обновление вашего расширение,
</p>
<ul>
    <li>Используйте правила семантической версионности.</li>
    <li>Используйте последовательный формат для ваших репозиториев, так как они рассматриваются как версии строк композитором, например - 0.2.4, 0.2.5,0.3.0,1.0.0.</li>
</ul>
<h3>
    composer.json
</h3>
<p>
    Yii2 использует Composer для установки Yii2 и расширений для Yii2. С этой целью,
</p>
<ul>
    <li>Используйте тип yii2-extension в файле composer.json, если ваше расширение Yii-специфичное (сделано специально для yii).</li>
    <li>Не используйте yii или yii2 как имя vendor'а в composer'е.</li>
    <li>Не используйте yiisoft как имя vendor'а или имя пакета в composer'е.</li>
</ul>
<p>
    Если ваши классы в расширении находятся непосредственно в корневом каталоге репозитория (хранилища), вы можете использовать PSR-4 autoloader следующим образом в вашем файле composer.json:<br />
    <?php
    highlight_string('<?php
{
        "name": "myname/mywidget",
        "description": "My widget is a cool widget that does everything",
        "keywords": ["yii", "extension", "widget", "cool"],
        "homepage": "https://github.com/myname/yii2-mywidget-widget",
        "type": "yii2-extension",
        "license": "BSD-3-Clause",
        "authors": [
                {
                    "name": "John Doe",
                        "email": "doe@example.com"
                }
        ],
        "require": {
        "yiisoft/yii2": "*"
        },
        "autoload": {
        "psr-4": {
            "myname\\\\mywidget\\\\": ""
                }
        }
}
?>');
    ?>
</p>
<p>
    В composer.json, указанном выше myname/mywidget - это имя пакета, который будет зарегистрирован в Packagist. Он является общим для имени пакета, чтобы соответствовать вашему имени репозитория в GitHub.
</p>
<p>
    В composer.json, указанном выше указан PSR-4 autoloader, отображение пространства имен myname\mywidget на корневой каталог, где находятся классы.
</p>
<p>
    Более подробно о данном синтаксисе можно найти в документации <a href="http://getcomposer.org/doc/04-schema.md#autoload" target="_blank">Composer</a>.
</p>
<h2>
    Работа с базой данных
</h2>
<hr />
<p>
    Расширения иногда используют свои собственные таблицы базы данных. В таких ситуациях,
</p>
<ul>
    <li>Если расширение создает или изменяет схему базы данных, всегда используйте миграции Yii вместо файлов SQL или пользовательских сценариев.</li>
    <li>Миграции должны быть применимы по возможности к разным бд.</li>
    <li>Не используйте Active Record модели в ваших миграциях.</li>
</ul>
<h2>
    Assets (активы)
</h2>
<hr />
<ul>
    <li>Регистрация asset'ов через <a href="/yiisoft/yii2/blob/master/docs/guide/assets.md" target="_blank">bundles</a>.</li>
</ul>
<h2>
    События
</h2>
<hr />
<p>
    Подлежит обсуждению
</p>
<h2>
    i18n
</h2>
<hr />
<ul>
    <li>Если расширение выводит сообщения предназначенное для конечного пользователя, то они должны быть завернуты в Yii::t() для того, чтобы можно было перевести.</li>
    <li>Исключения и другие сообщения для разработчиков не должны переводиться.</li>
    <li>Рассмотрим доказывая config.php для команды yii message упростить перевод.</li>
</ul>
<h2>
    Тестирование расширений
</h2>
<hr />
<ul>
    <li>Попробуйте добавить модульные тесты для PHPUnit.</li>
</ul>