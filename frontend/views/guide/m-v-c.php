<h1>
    Обзор MVC
</h1>
<hr />
<p>
    Yii реализует шаблон проектирования Model-View-Controller (MVC), который широко используется в Интернете, и других областях прикладного программирования.
    MVC стремится отделить бизнес-логику от пользовательского интерфейса, что позволяет разработчикам более легко изменять отдельные компоненты приложения, не влияя или даже трогая других.
</p>
<p>
    В MVC, модель представляет собой информацию (данные) и бизнес-правила, к которым данные должны придерживаться.
    Представление содержит элементы пользовательского интерфейса, такие как текст, изображения, и элементы формы.
    Контроллер управляет связью между моделью и представлением, действует в качестве посредника.
</p>
<p>
    Помимо реализации шаблона проектирования MVC, Yii также вводит фронт-контроллер, который называется приложение.
    Фронт-контроллер инкапсулирует (выполняет) контекст выполнения для обработки запроса.
    Это означает, что фронт-контроллер собирает информацию о запросе пользователя, а затем отправляет его на соответствующий контроллер для фактической обработки этого запроса.
    Другими словами, фронт-контроллер является основным менеджером приложений, обработки всех запросов и соответственно делегированием действий.
</p>
<p>
    Следующая диаграмма показывает статическую структуру приложения Yii:<br />
    <img style="max-width:100%;" alt="Static structure of Yii application" src="https://github.com/yiisoft/yii2/raw/master/docs/guide/images/structure.png">
</p>
<h2>
    Типичный рабочий процесс
</h2>
<hr />
<p>
    На следующей диаграмме показан типичный рабочий процесс применения Yii обработки пользовательского запроса:
    <br />
    <img style="max-width:100%;" alt="Typical workflow of a Yii application" src="https://github.com/yiisoft/yii2/raw/master/docs/guide/images/flow.png">
</p>
<ol>
    <li>Пользователь делает запрос по URL http://www.example.com/index.php?r=post/show&id=1. Веб-сервер обрабатывает запрос, выполнив загрузочный скрипт index.php.</li>
    <li>Загрузочный скрипт создает [[yii\web\Application|Application]] экземпляр и запускает его.</li>
    <li>Экземпляр приложения получает подробную информацию о запросе пользователя от компонента приложения с именем request.</li>
    <li>Приложение определяет какой контроллер и действие этого контроллера было запрошено. Это достигается с помощью компонента приложений с именем urlManager. Для этого примера, контроллер = post, который относится к классу PostController и действие = show, подлинный смысл которого определяется контроллером.</li>
    <li>Приложение создает экземпляр запрашиваемого контроллера для дальнейшей обработки запроса пользователя. Контроллер определяет, что действие show относится к методу с именем actionShow в классе контроллера. Затем он создает и выполняет фильтры (например: контроль доступа, бенчмаркинг), связанные с этим действием.  Затем действие выполняется, если выполнение допускается фильтрами (например, если пользователь имеет разрешение на выполнение этого действия).</li>
    <li>Действие создается экземпляр модели Post, используя базовую таблицу базы данных, где значение ID соответствует записи 1.</li>
    <li>Действие показывает вид = show, передавая в представление экземпляр модели Post.</li>
    <li>Вид читает атрибуты экземпляра модели Post и отображает значения этих атрибутов.</li>
    <li>Вид выполняет некоторые виджеты.</li>
    <li>Результат вывода вида действия передается в макет приложения и показывается полный результат.</li>
    <li>Действие завершает вывод вида и отображает результат пользователю.</li>
</ol>