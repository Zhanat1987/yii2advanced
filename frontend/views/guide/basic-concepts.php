<h1>
    Основные понятия Yii
</h1>
<hr/>
<h2>
    Компонент и объект
</h2>
<hr/>
<p>
    Классы фреймворка обычно наследуются от одного из двух базовых классов [[yii\base\Object]] или
    [[yii\base\Component]].
    Эти классы предоставляют полезные функции, которые добавляются автоматически для всех классов, наследующихся от них.
</p>
<p>
    Класс [[yii\base\Object|Object]] предоставляет <a href="" target="_blank">особенности настройки и свойства</a>.
    Класс [[yii\base\Component|Component]] наследуются от [[yii\base\Object|Object]] и дополнительно предоставляет
    управление событиями и поведениями.
</p>
<p>
    Класс [[yii\base\Object|Object]] обычно используется для классов, представляющих основные структуры данных в то
    время как [[yii\base\Component|Component]] используется для компонентов приложения и других классов, которые
    реализуют более высокую логику.
</p>
<h2>
    Конфигурация объекта
</h2>
<hr/>
<p>
    Класс [[yii\base\Object|Object]] вводит единый способ конфигурирования объектов.
    Любой класс потомок от [[yii\base\Object|Object]] должен объявить его конструктор (при необходимости) следующим
    образом, чтобы быть правильно настроенным:<br/>
    <?php
    highlight_string('<?php
class MyClass extends \yii\base\Object
{
    public function __construct($param1, $param2, $config = [])
    {
        // ... initialization before configuration is applied

        parent::__construct($config);
    }

    public function init()
    {
        parent::init();

        // ... initialization after configuration is applied
    }
}
?>');
    ?>
</p>
<p>
    В приведенном выше коде, последний параметр конструктора - конфигурационный массив, который содержит пары
    имя-значение для инициализации свойств в конце выполнения конструктора.
    Вы можете переопределить метод init(), чтобы сделать работу инициализации после того, как применится конфигурация.
</p>
<p>
    Следуя этой конвенции, вы сможете создать и настроить новый объект, использующий массив конфигурации вроде
    следующего:<br/>
    <?php
    highlight_string("<?php
\$object = Yii::createObject([
    'class' => 'MyClass',
    'property1' => 'abc',
    'property2' => 'cde',
], \$param1, \$param2);
?>");
    ?>
</p>
<h2>
    Псевдонимы путей
</h2>
<hr/>
<p>
    Yii 2.0 расширяет использование псевдонимов путей для файлов/каталогов и URL'ов.
    Псевдоним должен начинаться с символа @, чтобы его можно было отличить от путей файлов/каталогов и URL'ов.
    Например, псевдоним @yii относится к каталогу установки Yii, а @web содержит базовый URL для текущего веб-приложения
    (фронт-енд или бэк-енд).
    Псевдонимы путей поддерживаются в большинстве мест в коде ядра Yii.
    Например, FileCache::cachePath может принимать как псевдоним пути, так и нормальный путь к каталогу.
</p>
<?php
echo '<br />';
echo '@yii - ' . Yii::getAlias('@yii');
echo '<br />';
echo '@app - ' . Yii::getAlias('@app');
echo '<br />';
echo '@web - ' . Yii::getAlias('@web');
echo '<br />';
echo '@common - ' . Yii::getAlias('@common');
echo '<br />';
?>
<p>
    Псевдонимы путей также тесно связаны с пространствами имен класса.
    Рекомендуется определять псевдоним пути для каждого корневого пространства имен, так что вы можете использовать Yii
    класс автопогрузчик без дальнейшей конфигурации.
    Например, так как @yii относится к каталогу установки Yii, то такой класс как yii\web\Request может быть
    автоматически загружен с помощью Yii.
    Если вы используете внешнюю библиотеку, например Zend Framework, вы можете определить псевдоним пути @Zend, который
    относится к своей папке с программой и Yii сможет сделать автозагрузку любого класса из этой библиотеки.
</p>
<h2>
    Автоматическая загрузка
</h2>
<hr/>
<p>
    Все классы, интерфейсы и трейты загружаются автоматически в момент когда они используются.
    Там нет необходимости использовать include или require.
    Это, также верно для пакетов загруженых через Composer и расширений Yii.
</p>
<p>
    Автопогрузчик работает в соответствии с PSR-4.
    Это означает, что пространства имен и классы, интерфейсы и трейты должны соответствовать путям файловой системы,
    кроме корневого пути пространства имен, которое определяется псевдонимом пути.
</p>
<p>
    Например, если обычный псевдоним @app относится к /var/www/example.com/, то \app\models\User будет загружаться из
    /var/www/example.com/app/models/User.php.
</p>
<p>
    Пользовательские псевдонимы путей могут быть добавлены, используя следующий код:<br/>
    <?php highlight_string("<?php Yii::setAlias('@shared', realpath('~/src/shared')); ?>"); ?>
</p>
<p>
    Дополнительные автопогрузчики могут быть зарегистрированы с помощью стандартного PHP spl_autoload_register.
</p>
<h2>
    Вспомогательные классы
</h2>
<hr/>
<p>
    Вспомогательный класс, как правило, содержит только статические методы, и используются следующим образом:<br/>
    <?php
    highlight_string("<?php
use \yii\helpers\Html;
echo Html::encode('Test > test');
?>");
    ?>
</p>
<p>
    Вспомогательные классы фреймворка:<br/>
    <ul>
        <li>ArrayHelper</li>
        <li>Console</li>
        <li>FileHelper</li>
        <li>Html</li>
        <li>HtmlPurifier</li>
        <li>Inflector</li>
        <li>Json</li>
        <li>Markdown</li>
        <li>Security</li>
        <li>StringHelper</li>
        <li>VarDumper</li>
    </ul>
</p>