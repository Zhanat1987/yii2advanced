<h1>
    Консольные приложения
</h1>
<hr />
<p>
    Yii имеет полнофункциональную поддержку консоли. Структура консольного приложения в Yii очень похожа на веб-приложения.
    Оно состоит из одного или более [yii\console\Controller]. Каждый из них имеет одно или несколько действий.
</p>
<h2>
    Использование
</h2>
<hr />
<p>
    Вы можете выполнять действия контроллера, используя следующий синтаксис:<br />
    <?php
    highlight_string("<?php
yii <route> [--option1=value1 --option2=value2 ... argument1 argument2 ...]
?>");
    ?>
</p>
<p>
    Например, [[yii\console\controllers\MigrateController::actionCreate()|MigrateController::actionCreate()]]
    с [[yii\console\controllers\MigrateController::$migrationTable|MigrateController::$migrationTable]] -
    это действие контроллера с переменной может быть вызвано из командной строки следующим образом:<br />
    <?php
    highlight_string("<?php
yii migrate/create --migrationTable=my_migration
?>");
    ?>
</p>
<p>
    В приведенном выше коде, yii - это сценарий входа в консольное приложение, описанное ниже.
</p>
<h2>
    Входной скрипт
</h2>
<hr />
<p>
    Входной скрипт в консольное приложение, как правило, называется yii, расположенный в корневом каталоге приложения и содержит код вроде следующего:<br />
    <?php
    highlight_string("<?php
#!/usr/bin/env php
<?php
/**
 * Yii console bootstrap file.
 *
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2008 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */

defined('YII_DEBUG') or define('YII_DEBUG', true);

// fcgi doesn't have STDIN and STDOUT defined by default
defined('STDIN') or define('STDIN', fopen('php://stdin', 'r'));
defined('STDOUT') or define('STDOUT', fopen('php://stdout', 'w'));

require(__DIR__ . '/vendor/autoload.php');
require(__DIR__ . '/vendor/yiisoft/yii2/Yii.php');

\$config = require(__DIR__ . '/config/console.php');

\$application = new yii\\console\\Application(\$config);
\$exitCode = \$application->run();
exit(\$exitCode);
?>");
    ?>
</p>
<p>
    Этот сценарий является частью вашего приложения, так что вы можете свободно настроить его. Константа YII_DEBUG может быть установлена в false, если вы не хотите увидеть трассировку стека при ошибке и хотите повысить общую производительность. В обоих основных и дополнительных шаблонах приложений она включена, чтобы обеспечить для разработчиков больше благоприятных условий.
</p>
<h2>
    Конфигурация
</h2>
<hr />
<p>
    Как видно в приведенном выше коде, консольное приложение использует собственные конфигурационные файлы с именами console.php. В этом файле необходимо указать, как настроить различные компоненты и свойства приложения.
</p>
<p>
    Если веб-приложение и консольное приложение имеют много конфигураций, вы можете рассмотреть вопрос о переходе на общую часть в отдельный файл, и включить этот файл в обе конфигурации приложений, так же, как это делается в «advanced» шаблоне приложения.
</p>
<p>
    Иногда, вы можете запустить консольную команду, используя конфигурацию приложения, которая отличается от указанного в сценарии входа. Например, вы можете использовать команду yii migrate, чтобы выполнить миграции в базу данных, которые настроены в каждом отдельном тестовом сайте. Чтобы сделать это, надо просто указать файл настройки приложений с помощью опции AppConfig, как следующий:<br />
    <?php
    highlight_string("<?php
yii <route> --appconfig=path/to/config.php ...
?>");
    ?>
</p>
<h2>
    Создание собственных консольных команд
</h2>
<hr />
<h3>
    Консольные контроллеры и действия
</h3>
<p>
    Консольная команда определяется как класс контроллер, который расширяется от [[yii\console\Controller]]. В классе контроллера, вы можете определить один или несколько действий, которые соответствуют суб-командам команды. В каждом действии, есть код для реализации определенных задач.
</p>
<p>
    При запуске команды, необходимо указать путь к соответствующему действию контроллера. Например, маршрут migrate/create определяет суб-команду, соответствующую [[yii\console\controllers\MigrateController::actionCreate()|MigrateController::actionCreate()]] действию контроллера. Если маршрут не содержит ID действия, то будет выполняться действие по умолчанию.
</p>
<h3>
    Опции
</h3>
<p>
    Переопределив метод [[yii\console\Controller::globalOptions()]], можно задать опции, которые доступны для консольной команды. Этот метод должен возвращать список имен public свойств класса контроллера. При запуске команды, вы можете указать значение опции, используя синтаксис - OptionName = OptionValue, т.е. задать значение = 'OptionValue' для свойства класса контроллера = 'OptionName'.
</p>
<p>
    Если значение по умолчанию опции имеет тип массива, то, если вы установите этот параметр при выполнении команды, значение опциона будет преобразовано в массив путем разделения входной строки запятыми.
</p>
<h3>
    Аргументы
</h3>
<p>
    Кроме опций, команда также может принимать аргументы. Аргументы будут переданы в качестве параметров в метод действия, соответствующего запрашиваемой суб-команде. Первый аргумент соответствует первому параметру, второй соответствует второму, и так далее. Если предоставляется не достаточно аргументов, соответствующие параметры могут принять заявленные значения по умолчанию, или если они не имеют значения по умолчанию команда выдаст ошибку.
</p>
<p>
    Вы можете использовать подсказку 'массив' для типа параметра, чтобы указать, что аргументы должны быть обработаны в виде массива. Массив будет создан путем разделения входной строки запятыми.
</p>
<p>
    Следующие примеры показывают как объявить аргументы:<br />
    <?php
    highlight_string("<?php
class ExampleController extends \\yii\\console\\Controller
{
    // The command \"yii example/create test\" will call \"actionCreate('test')\"
    public function actionCreate(\$name) { ... }

    // The command \"yii example/index city\" will call \"actionIndex('city', 'name')\"
    // The command \"yii example/index city id\" will call \"actionIndex('city', 'id')\"
    public function actionIndex(\$category, \$order = 'name') { ... }

    // The command \"yii example/add test\" will call \"actionAdd(['test'])\"
    // The command \"yii example/add test1,test2\" will call \"actionAdd(['test1', 'test2'])\"
    public function actionAdd(array \$name) { ... }
}
?>");
    ?>
</p>
<h3>
    Код выхода
</h3>
<p>
    Использование кодов возврата является лучшей практикой разработки консольных приложений. Если команда возвращает 0 значит все в порядке. Если это число больше нуля, у вас есть ошибка, и это число сообщает код ошибки.
</p>