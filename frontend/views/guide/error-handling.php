<h1>
    Обработка ошибок
</h1>
<hr />
<p>
    Обработка ошибок в Yii отличается от обработки ошибок в простом PHP. Прежде всего, Yii будет преобразовывать все не фатальные ошибки в исключения. Поступая таким образом, вы можете корректно обрабатывать их с помощью try-catch. Во-вторых, даже фатальные ошибки в Yii показываются хорошим способом. Это означает, что в режиме отладки, вы можете проследить причины фатальных ошибок для того, чтобы быстрее определить причину проблемы.
</p>
<h2>
    Обработка ошибок в выделенном действия контроллера
</h2>
<hr />
<p>
    Страница ошибки в Yii по умолчанию является хорошим помощником при разработке сайта, и приемлема для продакшн, если YII_DEBUG выключен в вашем загрузочном файле index.php. Но, вы можете настроить страницу ошибки по умолчанию, чтобы сделать ее более подходящей для вашего проекта.
</p>
<p>
    Самый простой способ создать собственную страницу ошибки это использовать выделенное действие контроллера для показа ошибок. Во-первых, вам нужно настроить компонент ErrorHandler в конфигурации приложения:<br />
    <?php
    highlight_string("<?php
return [
    // ...
    'components' => [
        // ...
        'errorHandler' => [
            'errorAction' => 'site/error',
    ],
?>");
    ?>
</p>
<p>
    При такой настройке, всякий раз, когда возникает ошибка, Yii будет выполнять действие "error" контроллера "Site". Это действие следует искать во время исключений, и если есть исключение, то показывать соответствующий файл представления с исключением:<br />
    <?php
    highlight_string("<?php
public function actionError()
{
    if (\\Yii::\$app->exception !== null) {
        return \$this->render('error', ['exception' => \\Yii::\$app->exception]);
    }
}
?>");
    ?>
</p>
<p>
    Далее, вы должны создать файл views/site/error.php, который будет использовать исключение. Объект исключение имеет следующие свойства:
</p>
<ul>
    <li>statusCode: код состояния HTTP (например 403, 500). Доступно только для исключений HTTP.</li>
    <li>code: код исключения.</li>
    <li>type: тип ошибки (например HttpException, PHP Ошибка).</li>
    <li>message: сообщение об ошибке.</li>
    <li>file: имя файла PHP скрипта, где произошла ошибка.</li>
    <li>line: номер строки кода, где произошла ошибка.</li>
    <li>trace: стек вызовов ошибки.</li>
    <li>source: исходный код контекста, где произошла ошибка.</li>
</ul>
<h2>
    Обработка ошибок без выделенного действия контроллера
</h2>
<hr />
<p>
    Вместо того чтобы создавать выделенное действие в контроллере Site, вы можете просто указать Yii, какой класс следует использовать для обработки ошибок:<br />
    <?php
    highlight_string("<?php
public function actions()
{
    return [
        'error' => [
            'class' => 'yii\\web\\ErrorAction',
        ],
    ];
}
?>");
    ?>
</p>
<p>
    После связывания класса с ошибкой, как описано выше, определяют файл views/site/error.php, который будет автоматически использоваться. Представлению будут переданы три переменные:
</p>
<ul>
    <li>$name: имя ошибке</li>
    <li>$message: сообщение об ошибке</li>
    <li>$exception: исключение, которое обрабатывается</li>
</ul>
<p>
    Объект $exception будет иметь те же свойства, описанные выше.
</p>