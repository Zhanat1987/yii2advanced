<h1>
    Логирование
</h1>
<hr />
<p>
    Yii предоставляет гибкий и масштабируемый компонент для логирования, который способен обрабатывать сообщения в соответствии с уровнем сложности или по типу. Вы можете фильтровать сообщения по нескольким критериям и направлять их в файлы, электронную почту, отладчик и т.д.
</p>
<h2>
    Основы логирования
</h2>
<hr />
<p>
    Основы логирования так же просты, как вызов одного метода:<br />
    <?php
    highlight_string("<?php
\\Yii::info('Hello, I am a test log message');
?>");
    ?>
</p>
<h3>
    Категории сообщения для логирования
</h3>
<p>
    Кроме того, что само сообщение категории сообщения может быть указано в целях обеспечения фильтрации таких сообщений и управлять ими по-разному. Категория сообщения передается в качестве второго аргумента в метод логирования и приложения по умолчанию.
</p>
<h3>
    Уровни важности
</h3>
<p>
    Есть несколько уровней важности и доступны соответствующие методы:
</p>
<ul>
    <li>[[Yii::trace]] используется в основном в процессе разработки, чтобы указать рабочий процесс некоторого кода. Обратите внимание, что он работает только в режиме разработки, когда YII_DEBUG установлен в true.</li>
    <li>[[Yii::error]] используется, когда есть неустранимая ошибка.</li>
    <li>[[Yii::warning]] используется когда произошла ошибка, но выполнение может быть продолжено.</li>
    <li>[[Yii::info]] используется для учета важных событий, таких как логины администратора.</li>
</ul>
<h2>
    Цели логирования
</h2>
<hr />
<p>
    Когда один из методов ведения журнала вызывается, сообщение передается в [[yii\log\Logger]] компонент также доступный, как Yii::$app->log. Logger накапливает сообщения в память, а затем, когда есть достаточно сообщений или когда текущий запрос завершен, то отправляет их в различных цели журнала, таких как файл или по электронной почте.
</p>
<p>
    Вы можете настроить цели в конфигурации приложения, вроде следующего:<br />
    <?php
    highlight_string("<?php
[
    'components' => [
        'log' => [
            'targets' => [
                'file' => [
                    'class' => 'yii\\log\\FileTarget',
                    'levels' => ['trace', 'info'],
                    'categories' => ['yii\\*'],
                ],
                'email' => [
                    'class' => 'yii\\log\\EmailTarget',
                    'levels' => ['error', 'warning'],
                    'message' => [
                        'to' => ['admin@example.com', 'developer@example.com'],
                        'subject' => 'New example.com log message',
                    ],
                ],
            ],
        ],
    ],
]
?>");
    ?>
</p>
<p>
    В конфигурации выше мы определяем две цели журнала: [[yii\log\FileTarget|file]] и [[yii\log\EmailTarget|email]]. В обоих случаях мы имеем фильтрации сообщений в зависимости от целей по степени тяжести. В случае, если цель - файл, то мы дополнительно фильтруем по категориям. yii\* означает все категории, начиная с yii\.
</p>
<p>
    Каждая цель логирования может иметь имя и можно ссылаться через [[yii\log\Logger::targets|targets]] объект следующим образом:<br />
    <?php
    highlight_string("<?php
Yii::\$app->log->targets['file']->enabled = false;
?>");
    ?>
</p>
<p>
    Когда приложение заканчивается или [[yii\log\Logger::flushInterval|flushInterval]] достигается, Logger будет вызывать [[yii\log\Logger::flush()|flush()]] для отправки сообщений журнала для различных целей журналов, такие как файл, электронную почту, веб-сайтов.
</p>
<h2>
    Профилирование
</h2>
<hr />
<p>
    Профилирование производительности - это специальный тип сообщений, которые могут быть использованы для измерения времени, необходимого для исполнения некоторого блока кода, чтобы выявить узкие места в производительности.
</p>
<p>
    Для его использования нужно определить, какие блоки кода надо профилировать. Тогда мы отмечаем начало и конец каждого блока кода, вставив следующие методы:<br />
    <?php
    highlight_string("<?php
\\Yii::beginProfile('myBenchmark');
...code block being profiled...
\\Yii::endProfile('myBenchmark');
?>");
    ?>
</p>
<p>
    где 'myBenchmark' однозначно идентифицирует блок кода.
</p>
<p>
    Примечание, блоки кода должны быть вложены должным образом, например,<br />
    <?php
    highlight_string("<?php
\\Yii::beginProfile('block1');
    // some code to be profiled
    \\Yii::beginProfile('block2');
        // some other code to be profiled
    \\Yii::endProfile('block2');
\\Yii::endProfile('block1');
?>");
    ?>
</p>
<p>
    Результаты профилирования могут быть отображены в отладчике.
</p>