<h1>
    Безопасность
</h1>
<hr />
<p>
    Хорошая безопасность является жизненно важным для здоровья и успеха любого приложения. К сожалению, многие разработчики срезают углы, когда речь заходит о безопасности, либо из-за отсутствия понимания или потому,
    что для реализация слишком много препятствий. Чтобы сделать Ваше Yii
    приложение максимально безопасным, Yii включил несколько превосходных и простых в использовании функции безопасности.
</p>
<h2>
    Хеширование и проверка паролей
</h2>
<hr />
<p>
    Большинство разработчиков знают, что пароли не могут быть сохранены в виде обычного текста, но многие разработчики считают, что по-прежнему безопасно хешировать пароли с помощью MD5 или SHA1. Был момент, когда использование вышеупомянутых алгоритмов хэширования было достаточно, но современные компьютеры позволяют перевернуть такие ​​хэши очень быстро с помощью атаки грубой силы.
</p>
<p>
    В целях обеспечения повышенной безопасности для паролей пользователей,
    даже в худшем случае (ваше приложение взломано), вам нужно использовать алгоритм хеширования, который будет устойчивым даже к сильным атакам. Лучший текущий алгоритм хэширования - Bcrypt. В PHP, вы можете создать Bcrypt хеш, используя функцию crypt. Yii предоставляет две вспомогательные функции, которые используют функцию crypt для легкого безопасного создания и проверки хэшей.
</p>
<p>
    Когда пользователь предоставляет пароль в первый раз (например, при регистрации),
    пароль должен быть хэширован:<br />
    <?php
    highlight_string("<?php
\$hash = \\yii\\helpers\\Security::generatePasswordHash(\$password);
?>");
    ?>
</p>
<p>
    Хэш может быть ассоциирован с соответствующим атрибутом модели, поэтому он может быть сохранен в базе данных для последующего использования.
</p>
<p>
    Когда пользователь пытается войти в систему, отправленный пароль должен
    быть сравнен с захэшированным паролем, который был указан при регистрации:<br />
    <?php
    highlight_string("<?php
use yii\\helpers\\Security;
if (Security::validatePassword(\$password, \$hash)) {
    // all good, logging user in
} else {
    // wrong password
}
?>");
    ?>
</p>
<h2>
    Генерация псевдослучайных данных
</h2>
<hr />
<p>
    Псевдослучайные данные полезны во многих ситуациях. Например,  для восстановления пароля
    по электронной почте нужно сгенерировать token, сохранить его в базу данных, и отправить его
    по электронной почте до конечного потребителя, который в свою очередь позволит
    ему доказать принадлежность к этой учетной записи с помощью token'а.
    Это очень важно, что этот token должен быть уникальным и трудно расшифрованным, еще есть возможность, что атакующий может предсказать значение token'а и сбросить пароль пользователя.
</p>
<p>
    Yii помощник безопасности делает генерацию псевдослучайных данных простым:<br />
    <?php
    highlight_string("<?php
\$key = \\yii\\helpers\\Security::generateRandomKey();
?>");
    ?>
</p>
<p>
    Обратите внимание, что должно бытьустановлено  расширение OpenSSL в целях получения криптографически безопасных случайных данных.
</p>
<h2>
    Шифрование и дешифрование
</h2>
<hr />
<p>
    Yii предоставляет удобные вспомогательные функции, которые нужны для шифрования/дешифрования данных с использованием секретного ключа. Данные передаются через шифрование функции так, что только человек, который имеет секретный ключ сможет расшифровать его. Например, нам нужно хранить некоторую информацию в нашей базе, но мы должны убедиться, что только пользователь, который имеет секретный ключ может просмотреть его (даже если база данных приложения находится под угрозой):<br />
    <?php
    highlight_string("<?php
// \$data and \$secretKey are obtained from the form
\$encryptedData = \\yii\\helpers\\Security::encrypt(\$data, \$secretKey);
// store \$encryptedData to database
?>");
    ?>
</p>
<p>
    Впоследствии, когда пользователь хочет прочитать данные:<br />
    <?php
    highlight_string("<?php
// \$secretKey is obtained from user input, \$encryptedData is from the
database
\$data = \\yii\\helpers\\Security::decrypt(\$encryptedData, \$secretKey);
?>");
    ?>
</p>
<h2>
    Подтверждение целостности данных
</h2>
<hr />
<p>
    Есть ситуации, в которых вы должны убедиться, что данные не были подделаны третьей стороной или даже повреждены в некотором роде. Yii обеспечивает простой способ, чтобы подтвердить целостность данных в виде двух вспомогательных функций.
</p>
<p>
    Префикс данных с хэш генерируется из секретного ключа и данных<br />
    <?php
    highlight_string("<?php
// \$secretKey our application or user secret, \$genuineData obtained from a
reliable source
\$data = \\yii\\helpers\\Security::hashData(\$genuineData, \$secretKey);
?>");
    ?>
</p>
<p>
    Проверяет была ли нарушена целостность данных<br />
    <?php
    highlight_string("<?php
// \$secretKey our application or user secret, \$data obtained from an
unreliable source
\$data = \\yii\\helpers\\Security::validateData(\$data, \$secretKey);
?>");
    ?>
</p>
<h2>
    Безопасность Cookies
</h2>
<hr />
<ul>
    <li>валидация</li>
    <li>httpOnly</li>
</ul>
<h2>
    Смотрите также
</h2>
<hr />
<ul>
    <li>
        <a href="<?php echo Yii::$app->getUrlManager()->createUrl
            ('guide/view#security'); ?>">
            Безопасность в представлениях
        </a>
    </li>
</ul>