<h1>
    Миграция базы данных
</h1>
<hr />
<p>
    Как исходный код, так и структура базы данных развивается вместе с приложением разработанным и поддерживаемым на основе баз данных. Например, во время разработки, новая таблица может быть добавлена, или после того, как приложение будет запущено, может быть обнаружено, что дополнительный индекс не требуется. Важно следить за этими структурными изменениями базы данных (так называемые миграции), так же, как изменения в исходном коде отслеживаются с помощью контроля версий. Если исходный код и база данных не синхронизированы, то ошибки будут происходить, или все приложение может вызвать сбой. По этой причине, Yii обеспечивает инструмент для миграций в базы данных, который может отслеживать историю миграций данных, применять новые миграции, или вернуться к существующей.
</p>
<p>
    Следующие шаги показывают, как миграции базы данных используется командой во время разработки:
</p>
<ol>
    <li>Тим создает новую миграцию (например создает новую таблицу, изменяет определение столбца и т.д.).</li>
    <li>Тим совершает новую миграцию в систему управления версиями (например, Git, Mercurial).</li>
    <li>Даг обновляет свой репозиторий из системы управления версиями и получает новую миграцию.</li>
    <li>Даг применяет миграцию к своей локальной development базе данных, тем самым синхронизируя свою базу данных, чтобы отразить изменения, внесенные Тимом.</li>
</ol>
<p>
    Yii поддерживает миграцию базы данных с помощью инструмента командной строки yii migrate. Этот инструмент поддерживает:
</p>
<ul>
    <li>Создание новых миграций</li>
    <li>Применять, возвращать, и переделывать миграции</li>
    <li>Показывать историю миграции и новые миграции</li>
</ul>
<h2>
    Создание новых миграций
</h2>
<hr />
<p>
    Чтобы создать новую миграцию, выполните следующую команду:<br />
    <?php
    highlight_string("<?php
yii migrate/create <name>
?>");
    ?>
</p>
<p>
    Обязательный параметр name определяет очень краткое описание миграции. Например, если миграция создает новую таблицу с именем news, то нужно использовать следующую команду:<br />
    <?php
    highlight_string("<?php
yii migrate/create create_news_table
?>");
    ?>
</p>
<p>
    Как вы скоро увидите, параметр name используется как часть имени класса PHP в миграции. Таким образом, он должен содержать только буквы, цифры и/или символы подчеркивания.
</p>
<p>
    Приведенная выше команда создаст новый файл с именем m101129_185401_create_news_table.php. Этот файл будет создан в каталоге protected/migrations. Первоначально файл миграции будет генерироваться с помощью следующего кода:<br />
    <?php
    highlight_string("<?php
class m101129_185401_create_news_table extends \\yii\\db\\Migration
{
    public function up()
    {
    }

    public function down()
    {
        echo \"m101129_185401_create_news_table cannot be reverted.\n\";
        return false;
    }
}
?>");
    ?>
</p>
<p>
    Обратите внимание, что имя класса совпадает с именем файла, и следует шаблону m<timestamp>_<name>, где:
</p>
<ul>
    <li><code><timestamp></code> - относится к временной метки UTC (в формате yymmdd_hhmmss), когда миграция будет создана</li>
    <li><code><name></code> - берется из параметра имени команды</li>
</ul>
<p>
    В классе, метод up() должен содержать код, реализующий процесс миграции базы данных. Иными словами, метод up() выполняет код, который фактически изменяет базу данных. Метод down() должен содержать код, который отменяет изменения, сделанные методом up().
</p>
<p>
    Иногда невозможно сделать down(), чтобы отменить миграцию базы данных. Например, если миграция удаляет строки таблицы или всю таблицу, то данные не могут быть восстановлены в методе down(). В таких случаях миграция называется необратимой, то есть база данных не может произвести откат к предыдущему состоянию. Когда миграция является необратимой, как в приведенном выше генерируемом коде, метод down() возвращает false, чтобы указать, что миграция является необратимой.
</p>
<p>
    В качестве примера, давайте покажем миграцию о создании на таблицы news.<br />
    <?php
    highlight_string("<?php
use yii\\db\\Schema;

class m101129_185401_create_news_table extends \\yii\\db\\Migration
{
    public function up()
    {
        \$this->createTable('tbl_news', [
            'id' => 'pk',
            'title' => Schema::TYPE_STRING . ' NOT NULL',
            'content' => Schema::TYPE_TEXT,
        ]);
    }

    public function down()
    {
        \$this->dropTable('tbl_news');
    }

}
?>");
    ?>
</p>
<p>
    Базовый класс [\yii\db\Migration] предоставляет подключение к базе данных через компонент db. Вы можете использовать его для манипулирования данными и схемой базы данных.
</p>
<p>
    Типы столбцов, используемые в этом примере абстрактные типы, которые будут заменены с помощью Yii на соответствующие типы в зависимости от вашей системы управления базами данных. Вы можете использовать их, чтобы написать независимые от базы данных миграции. Например рк будет заменено на int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY для MySQL и integer PRIMARY KEY AUTOINCREMENT NOT NULL для SQLite. Смотрите документацию [[yii\db\QueryBuilder::getColumnType()]] для более подробной информации, а также список доступных типов. Вы также можете использовать константы, определенные в [[yii\db\Schema]] для определения типов столбцов.
</p>
<h2>
    Транзакционные миграции
</h2>
<hr />
<p>
    При выполнении сложных миграций DB, мы обычно хотим убедиться, что каждая миграция завершилась успешно или нет в целом, так чтобы база данных поддерживала согласованность и целостность. Для достижения этой цели, мы можем использовать DB транзакции. Мы могли бы использовать специальные методы safeUp и safeDown для этих целей.<br />
    <?php
    highlight_string("<?php
use yii\\db\\Schema;

class m101129_185401_create_news_table extends \\yii\\db\\Migration
{
    public function safeUp()
    {
        \$this->createTable('tbl_news', [
            'id' => 'pk',
            'title' => Schema::TYPE_STRING . ' NOT NULL',
            'content' => Schema::TYPE_TEXT,
        ]);

        \$this->createTable('tbl_user', [
            'id' => 'pk',
            'login' => Schema::TYPE_STRING . ' NOT NULL',
            'password' => Schema::TYPE_STRING . ' NOT NULL',
        ]);
    }

    public function safeDown()
    {
        \$this->dropTable('tbl_news');
        \$this->dropTable('tbl_user');
    }

}
?>");
    ?>
</p>
<p>
    Когда ваш код использует более одного запроса рекомендуется использовать safeUp и safeDown.
</p>
<blockquote>
    <p>
        Примечание: Не все СУБД поддерживают транзакции. А некоторые запросы к БД не могут быть переданы в транзакции. В этом случае, вам придется использовать up() и down(), вместо этого. А для MySQL, некоторые выражения SQL могут вызвать неявный commit.
    </p>
</blockquote>
<h2>
    Применение миграций
</h2>
<hr />
<p>
    Чтобы применить все доступные новые миграции (т.е. сделать локальную базу данных актуальной), выполните следующую команду:<br />
    <?php
    highlight_string("<?php
yii migrate
?>");
    ?>
</p>
<p>
    Команда покажет список всех новых миграций. Если вы подтвердите применение миграций, то она будет вызывать метод up() в каждом новом классе миграции, один за другим, в порядке значения временной метки в имени класса.
</p>
<p>
    После применения миграций, инструмент миграции сохраняет записи в таблицу с именем tbl_migration базы данных. Это позволяет инструменту определять, какие миграции были применены, а какие нет. Если таблица tbl_migration не существует, то инструмент будет автоматически создавать его в базе данных, указанной в компоненте db приложения.
</p>
<p>
    Иногда мы можем хотеть применить одну или несколько новых миграций. Мы можем использовать следующую команду:<br />
    <?php
    highlight_string("<?php
yii migrate/up 3
?>");
    ?>
</p>
<p>
    Эта команда будет применять 3 новые миграции. Изменение значения 3 позволит вам изменить количество миграций, которое должно примениться.
</p>
<p>
    Мы также можем перенести базу данных на определенную версию с помощью следующей команды:<br />
    <?php
    highlight_string("<?php
yii migrate/to 101129_185401
?>");
    ?>
</p>
<p>
    То есть, мы используем временную метку как часть имени миграции, чтобы указать версию, которую мы хотим перенести в базу данных. При наличии нескольких миграций между последней примененной миграцией и указанной миграцией, все эти миграции будут применены. Если указанная миграция была применена раньше, то все миграции будут применяться после того, как будут восстановлены (будет описано в следующем разделе).
</p>
<h2>
    Откат миграций
</h2>
<hr />
<p>
    Чтобы откатить одну или несколько примененных миграций, мы можем использовать следующую команду:<br />
    <?php
    highlight_string("<?php
yii migrate/down [step]
?>");
    ?>
</p>
<p>
    где необязательный step параметр определяет, сколько миграций надо откатить. По умолчанию это 1, а это означает откатиться назад к последней примененной миграции.
</p>
<p>
    Как было описано ранее, не все миграции могут быть возвращены. Пытаясь откатить такие миграции, будет сгенерировано исключение и остановиться весь процесс отката.
</p>
<h2>
    Выполненные заново миграции
</h2>
<hr />
<p>
    Выполненные заново миграции означают, что сначала делается откат, а затем применяются указанные миграции. Это может быть сделано с помощью следующей команды:<br />
    <?php
    highlight_string("<?php
yii migrate/redo [step]
?>");
    ?>
</p>
<p>
    где необязательный step параметр определяет, сколько миграций будет переделано. По умолчанию это 1, а это означает, что надо переделать последнюю миграцию.
</p>
<h2>
    Отображение информации о миграции
</h2>
<hr />
<p>
    Кроме наката и отката миграций, инструмент миграции также может отображать историю миграций и новые миграции, которые будут накатываться.<br />
    <?php
    highlight_string("<?php
yii migrate/history [limit]
yii migrate/new [limit]
?>");
    ?>
</p>
<p>
    где дополнительный limit параметр определяет количество миграций, которые будут отображаться. Если limit не указан, все доступные миграции будут отображаться.
</p>
<p>
    Первая команда показывает миграции, которые были применены, в то время как вторая команда показывает миграции, которые еще не были применены.
</p>
<h2>
    Изменение истории миграций
</h2>
<hr />
<p>
    Иногда мы можем хотеть изменить историю миграций к конкретной версии миграций без фактического применения или возврата соответствующих миграций. Это часто случается при разработке новой миграции. Мы можем использовать следующую команду, чтобы достичь этой цели.
</p>
<p>
    Эта команда очень похожа на командеу yii migrate/to, кроме того, что она только изменяет таблицу истории миграций до указанной версии без применения или возврата миграций.<br />
    <?php
    highlight_string("<?php
yii migrate/mark 101129_185401
?>");
    ?>
</p>
<h2>
    Настройка команд миграций
</h2>
<hr />
<p>
    Есть несколько способов настроить команду миграции.
</p>
<h3>
    Используйте параметры командной строки
</h3>
<p>
    Команда миграция идет с четырьмя параметрами, которые можно задать в командной строке:
</p>
<ul>
    <li>interactive - логическое, указывает, следует ли выполнять миграцию в интерактивном режиме. По умолчанию включено, что означает пользователю будет предложено при выполнении конкретной миграции. Вы можете установить false, тогда миграция будет сделана в качестве фонового процесса.</li>
    <li>migrationPath - строка, определяет каталог, хранящий все файлы классов миграции. Он должен быть указан в плане альтернативного пути, и соответствовать каталогу, который должен существовать. Если не указано, что она будет использовать подкаталог миграций под базовой директорией приложения.</li>
    <li>migrationTable - строка, задает имя таблицы базы данных для хранения информации об истории миграций. По умолчанию это tbl_migration, со следующей структурой таблицы: version varchar(255) primary key, apply_time integer.</li>
    <li>connectionID - строка, определяет идентификатор компонента приложения баз данных. По умолчанию 'db'.</li>
    <li>templateFile - строка, определяет путь к файлу, который будет подан в качестве шаблона кода для генерации классов миграции. Он должен быть указан в качестве альтернативного пути (например application.migrations.template). Если не установлен, то внутренний шаблон будет использован. Внутри шаблона, токен {ClassName} будет заменен на фактическое имя класса миграции.</li>
</ul>
<p>
    Чтобы указать эти параметры, выполните команду мигрирации, используя следующий формат<br />
    <?php
    highlight_string("<?php
yii migrate/up --option1=value1 --option2=value2 ...
?>");
    ?>
</p>
<p>
    Например, если мы хотим перенести для модуля форума, чьи файлы миграции находятся в каталоге миграций модуля, можно использовать следующую команду:<br />
    <?php
    highlight_string("<?php
yii migrate/up --migrationPath=@app/modules/forum/migrations
?>");
    ?>
</p>
<h3>
    Настройте команду глобально
</h3>
<p>
    В то время как параметры командной строки позволяют настроить команду миграции на лету, иногда мы хотим настроить команду раз и навсегда. Например, мы можем захотеть использовать другую таблицу для хранения истории миграций, или мы хотим использовать настроенный шаблон миграций. Мы можем сделать это, изменив файл конфигурации консольного приложения вроде следующего,<br />
    <?php
    highlight_string("<?php
'controllerMap' => [
    'migrate' => [
        'class' => 'yii\\console\\controllers\\MigrateController',
        'migrationTable' => 'my_custom_migrate_table',
    ],
]
?>");
    ?>
</p>
<p>
    Теперь, если мы выполним команду мигрировать, выше указанные конфигурации вступят в силу, не требуя нам вводить параметры командной строки каждый раз. Другие параметры команд могут также быть сконфигурированы таким образом.
</p>