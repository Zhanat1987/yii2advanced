<h1>
    Базовый шаблон приложения
</h1>
<hr />
<p>
    Базовый шаблон приложения Yii является идеальным решением для небольших проектов или если вы только начинаете изучать фреймворк.
</p>
<p>
    Базовый шаблон приложения включает в себя четыре страницы: стартовую страницу, страницу about, страницу контактов, и страницу логина. Страница контактов содержит контактную форму, чтобы пользователи могли отправлять свои вопросы и пожелания. Если предположить, что сайт имеет доступ к почтовому серверу и что электронный адрес администратора вводится в конфигурационном файле, то контактная форма будет работать. То же самое касается страницы входа, которая позволяет пользователям авторизоваться и получить доступ к закрытому контенту.
</p>
<h2>
    Установка
</h2>
<hr />
<p>
    Для установки фреймворка требуется Composer. Если у вас еще нет Composer'а​​, то вы можете скачать его с http://getcomposer.org/ или выполнив следующую команду на Linux/Unix/MacOS:<br />
    <?php
    highlight_string("<?php
curl -s http://getcomposer.org/installer | php
?>");
    ?>
</p>
<p>
    Затем можно создать базовый шаблон приложения Yii, используя следующую команду Composer'а:<br />
    <?php
    highlight_string("<?php
php composer.phar create-project --prefer-dist --stability=dev yiisoft/yii2-app-basic /path/to/yii-application
?>");
    ?>
</p>
<p>
    Теперь установите корневой каталог документов вашего веб-сервера в директорию /path/to/yii-application/web и вы должны получить доступ к приложению с помощью URL http://localhost/.
</p>
<h2>
    Структура директорий
</h2>
<hr />
<p>
    Базовое приложение не содержит большое количество директорий. Вот основная структура:
</p>
<ul>
    <li>assets - asset файлы приложения.</li>
    <li>AppAsset.php - определение assets'ов приложения, таких как CSS, JavaScript и т.д. Для дополнительной информации смотрите раздел "Управление assets'ами".</li>
    <li>commands - контроллеры для консоли.</li>
    <li>config - конфигурация.</li>
    <li>controllers - веб-контроллеры.</li>
    <li>models - модели приложения.</li>
    <li>runtime - логи, состояния, файлы с кэшом.</li>
    <li>views - файлы представлений.</li>
    <li>web - вэб-корень приложения.</li>
</ul>
<p>
    Корневой каталог содержит следующий набор файлов:
</p>
<ul>
    <li>.gitignore содержит список каталогов, игнорируемых git'ом. Если вы не хотите, чтобы какие-нибудь файлы или папки попали в ваш репозиторий, то укажите их в этом файле.</li>
    <li>codeception.yml - конфигурация для Codeception.</li>
    <li>composer.json - конфигурация для Composer'а, подробно описана ниже.</li>
    <li>LICENSE.md - информация о лицензии. Положите вашу лицензию проекта в этот файл. Особенно если это opensource проект.</li>
    <li>README.md - ОБЩАЯ ИНФОРМАЦИЯ об установке шаблона. Можно заменить его на информацию о Вашем проекте и его установке.</li>
    <li>requirements.php - Проверки требований для Yii.</li>
    <li>yii - файл начальной загрузки для консольного приложения.</li>
    <li>yii.bat - то же самое для Windows.</li>
</ul>
<h3>
    config
</h3>
<p>
    Этот каталог содержит файлы конфигурации:
</p>
<ul>
    <li>
        <code>console.php</code> - конфигурация консольного приложения.
    </li>
    <li>
        <code>params.php</code> - общие параметры приложения.
    </li>
    <li>
        <code>web.php</code> - конфигурация web приложения.
    </li>
    <li>
        <code>web-test.php</code> - конфигурация web приложения, ипользующаяся при запуске функциональных тестов.
    </li>
</ul>
<p>
    Все эти файлы возвращают массивы, используемые для настройки соответствующих свойств приложения. Посмотрите раздел 'Конфигурация' для более подробной информации.
</p>
<h3>
    views
</h3>
<p>
    Каталог Views содержит файлы представлений вашего приложения. В основном шаблоне есть:
</p>
<pre>
    layouts
        main.php
    site
        about.php
        contact.php
        error.php
        index.php
        login.php
</pre>
<p>
    Каталог layouts содержит шаблоны приложения. Каталог site содержит файлы представлений для контроллера SiteController, т.е. по принятому соглашению папка с представлениями для конкретного контроллера называется так же как и имя контроллера.
</p>
<h3>
    web
</h3>
<p>
    Каталог веб-корня приложения. Обычно веб-сервер указывается на нее.
</p>
<pre>
    assets
    css
    index.php
    index-test.php
</pre>
<p>
    assets - содержит опубликованные файлы assets'ов, таких как CSS, JavaScript и т.д. Процесс подключения происходит автоматическим, поэтому вам не нужно ничего делать с этим каталогом, надо только проверить имеет ли Yii достаточно прав на запись в него.
</p>
<p>
    css - содержит обычные файлы CSS и полезна для глобальных CSS файлов, которые не надо сжимать или объединять с помощью assets менеджера.
</p>
<p>
    index.php (фронт-контроллер приложения) - является основным скриптом начальной загрузки веб-приложения и является центральным пунктом для него. index-test.php является точкой входа для функционального тестирования.
</p>
<h2>
    Конфигурация Composer'а
</h2>
<hr />
<p>
    После установки шаблона приложения, хорошей идеей считается настройка файла composer.json, который можно найти в корневом каталоге:<br />
    <?php
    highlight_string('<?php
{
    "name": "yiisoft/yii2-app-basic",
    "description": "Yii 2 Basic Application Template",
    "keywords": ["yii", "framework", "basic", "application template"],
    "homepage": "http://www.yiiframework.com/",
    "type": "project",
    "license": "BSD-3-Clause",
    "support": {
        "issues": "https://github.com/yiisoft/yii2/issues?state=open",
        "forum": "http://www.yiiframework.com/forum/",
        "wiki": "http://www.yiiframework.com/wiki/",
        "irc": "irc://irc.freenode.net/yii",
        "source": "https://github.com/yiisoft/yii2"
    },
    "minimum-stability": "dev",
    "require": {
        "php": ">=5.4.0",
        "yiisoft/yii2": "*",
        "yiisoft/yii2-swiftmailer": "*",
        "yiisoft/yii2-bootstrap": "*",
        "yiisoft/yii2-debug": "*",
        "yiisoft/yii2-gii": "*"
    },
    "scripts": {
        "post-create-project-cmd": [
            "yii\\\\composer\\\\Installer::setPermission"
        ]
    },
    "extra": {
        "writable": [
            "runtime",
            "web/assets"
        ],
        "executable": [
            "yii"
        ]
    }
}
?>');
    ?>
</p>
<p>
    Вначале мы обновляем основную информацию. Измените название, описание, ключевые слова, домашнюю страницу и поддержку на значения соответствующие для вашего проекта.
</p>
<p>
    Теперь самое интересное. Вы можете добавить несколько пакетов в ваше приложение в раздел 'require'. Все эти пакеты находятся в packagist.org, так что не стесняйтесь и просмотрите этот веб-сайт для полезного кода.
</p>
<p>
    После того как ваш composer.json изменяется вы можете запустить команду <code>php composer.phar update --prefer-dist</code>, подождите пока пакеты скачаются и устанавятся, а затем просто используйте их. Автозагрузка классов будет обрабатываться автоматически.
</p>